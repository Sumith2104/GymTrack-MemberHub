
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './database.types'; // You might need to generate this type

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

let client: SupabaseClient<Database> | null = null;

if (!supabaseUrl) {
  console.error("CRITICAL: Missing environment variable NEXT_PUBLIC_SUPABASE_URL. Supabase client cannot be initialized. Please set this in your .env.local file.");
} else if (!supabaseAnonKey) {
  console.error("CRITICAL: Missing environment variable NEXT_PUBLIC_SUPABASE_ANON_KEY. Supabase client cannot be initialized. Please set this in your .env.local file.");
} else {
  try {
    client = createClient<Database>(supabaseUrl, supabaseAnonKey);
  } catch (error) {
    console.error("CRITICAL: Error initializing Supabase client:", error);
    // client remains null if initialization fails
  }
}

// If you have RLS enabled, you might need to adjust the client options or handle auth.
// For public data, this basic client is often sufficient.
// The `Database` generic type can be generated by Supabase CLI for better type safety:
// npx supabase gen types typescript --project-id <your-project-id> --schema public > src/lib/database.types.ts
// Then import it here. For now, we'll use a more generic type.
export const supabase = client;
